---
import LenguageSelect from "./LenguageSelect.astro";
import ThemeToggle from "./ThemeToggle.astro";
import { t } from "i18next";

const navItems = [
  {
    title: t('nav.experience'),
    label: "experiencia",
    url: "/#experience",
  },
  {
    title: t('nav.projects'),
    label: "proyectos",
    url: "/#projects",
  },
  {
    title: t('nav.about'),
    label: "sobre-mi",
    url: "/#about-me",
  },
  {
    title: t('nav.contact'),
    label: "contacto",
    url: "mailto:ramonromeca@gmail.com",
  },
];
---

<header class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2 space-x-10">
  <img class="w-14 h-14 rounded-full hover:w-32 hover:h-32 hover:animate-pulse" src="https://avatars.githubusercontent.com/u/49107346?v=4" alt="Myself">

  <nav class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center space-x-10">
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-[#00FFC8] dark:hover:text-[#00FFC8]"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
    <LenguageSelect />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") === entry.target.id) {
              item.classList.add("text-yellow-500");
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
